// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  name      String
  email     String      @unique
  password  String?
  createdAt DateTime    @default(now())
  events    UserEvent[] // Relationship to the UserEvent join table
  event     Event[]
  expenses  Expense[]
}

model Event {
  id          String        @id @default(cuid())
  name        String
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id]) // Event creator
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       UserEvent[] // Relationship to the UserEvent join table
  invitedUser InvitedUser[]
  expenses    Expense[]
}

model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  role      String // Roles like 'guest', 'member', etc.
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Composite unique constraint
}

model InvitedUser {
  id      String @id @default(cuid())
  email   String @unique
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  token   String
}

model Expense {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  eventId   String
  addedBy   String
  user      User     @relation(fields: [addedBy], references: [id])
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id])
}
